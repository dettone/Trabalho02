<html>

<head>
	<meta charset="utf-8" />
	<script id="shader-vs" type="x-shader/x-vertex">
      attribute vec3 aVertexPosition;
      attribute vec2 aTextureCoord;
      
      uniform mat4 uMMatrix;
      uniform mat4 uVMatrix;
      uniform mat4 uPMatrix;
      
      varying vec2 vTextureCoord;
      
      void main(void)
      {
	gl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aVertexPosition, 1.0);
	vTextureCoord = aTextureCoord;
      }
    </script>
	<script id="shader-fs" type="x-shader/x-fragment">
      precision mediump float;
      varying vec2 vTextureCoord;
      
      uniform sampler2D uSampler;
      
      void main(void)
      {
	gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
      }
    </script>
	<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
	<script type="text/javascript" src="jquery-2.1.0.min.js"></script>
	<script type="text/javascript" src="webgl-utils.js"></script>

	<script type="text/javascript">

		var gl;
		var shaderProgram;
		var cuboVertexPositionBuffer;
		var cuboVertexTextureCoordBuffer;
		var cuboVertexIndexBuffer;
		var piramideVertexPositionBuffer;
		var piramideVertexTextureCoordBuffer;
		var rPiramide = 0;
    	var mMatrix = mat4.create();
		var mMatrixPilha = [];
		var pMatrix = mat4.create();
		var vMatrix = mat4.create();
		var pxVelo = 0;
		var pyRot = 0;
		var pyVelo = 0;
		var filtro = 0;
		var ult = 0;
		var xRot = 0;
		var xVelo = 0;
		var yRot = 0;
		var yVelo = 0;
		var pxRot = 0;
		var caixaTexturas = Array();
		var trianguloTexturas = Array();
		var teclasPressionadas = {};
		var orbita = false;
		// Iniciar o ambiente quando a página for carregada
		$(function () {
			iniciaWebGL();
		});

		// Iniciar o ambiente
		function iniciaWebGL() {
			var canvas = $('#licao01-canvas')[0];
			iniciarGL(canvas); // Definir como um canvas 3D
			iniciarShaders();  // Obter e processar os Shaders
			iniciarBuffers();  // Enviar o triângulo e quadrado na GPU
			iniciarAmbiente(); // Definir background e cor do objeto
			iniciarTextura();

			document.onkeydown = eventoTeclaPress;
			document.onkeyup = eventoTeclaSolta;

			tick();
		}


		function tick() {
			requestAnimFrame(tick);
			tratarTeclado();
			desenharCena();
			animar();
		}

		function eventoTeclaPress(evento) {
			teclasPressionadas[evento.keyCode] = true;
			if (teclasPressionadas[32]) {
				orbita = !orbita;
			}
			if (String.fromCharCode(evento.keyCode) == "F")
				filtro = (filtro + 1) % 3;
			return false;
		}

		function eventoTeclaSolta(evento) {
			teclasPressionadas[evento.keyCode] = false;
			return false;
		}

		function tratarTeclado() {
			if (teclasPressionadas[33]) {
				// Page Up
				z -= 0.05;
			}
			if (teclasPressionadas[34]) {
				// Page Down
				z += 0.05;
			}
			if (teclasPressionadas[65]) {
				// A
				pyVelo -= 1;
			}
			if (teclasPressionadas[83]) {
				// S
				pxVelo += 1;
			}
			if (teclasPressionadas[68]) {
				// D
				pyVelo += 1;
			}
			if (teclasPressionadas[87]) {
				// W
				pxVelo -= 1;
			}
			if (teclasPressionadas[85]) {
				// U
				yVelo -= 1;
			}
			if (teclasPressionadas[75]) {
				//  K
				yVelo += 1;
			}
			if (teclasPressionadas[72]) {
				// H
				xVelo -= 1;
			}
			if (teclasPressionadas[74]) {
				// J
				xVelo += 1;
			}

		}

		function iniciarTextura() {
			var imagemCaixa = new Image();
			var imagemTriangulo = new Image();
			for (var i = 0; i < 3; i++) {
				var textura = gl.createTexture();
				textura.image = imagemCaixa;
				caixaTexturas.push(textura);
				var texturaTriangulo = gl.createTexture();
				texturaTriangulo.image = imagemTriangulo;
				trianguloTexturas.push(texturaTriangulo);
			}
			imagemCaixa.onload = function () {
				tratarTextura(caixaTexturas);
				tratarTextura(trianguloTexturas);
			}
			imagemCaixa.src = "Alerta.png";
			imagemTriangulo.src = "PiramedeFaucon.png";
			shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");
		}
		function tratarTextura(texturas) {
			gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
			gl.bindTexture(gl.TEXTURE_2D, texturas[0]);
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texturas[0].image);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);

			gl.bindTexture(gl.TEXTURE_2D, texturas[1]);
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texturas[1].image);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

			gl.bindTexture(gl.TEXTURE_2D, texturas[2]);
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texturas[2].image);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
			gl.generateMipmap(gl.TEXTURE_2D);

			gl.bindTexture(gl.TEXTURE_2D, null);
		}

		function iniciarGL(canvas) {
			try {
				gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
				gl.viewportWidth = canvas.width;
				gl.viewportHeight = canvas.height;
			}
			catch (e) {
				if (!gl) {
					alert("Não pode inicializar WebGL, desculpe");
				}
			}
		}

		function iniciarShaders() {
			var vertexShader = getShader(gl, "#shader-vs");
			var fragmentShader = getShader(gl, "#shader-fs");

			shaderProgram = gl.createProgram();
			gl.attachShader(shaderProgram, vertexShader);
			gl.attachShader(shaderProgram, fragmentShader);
			gl.linkProgram(shaderProgram);

			if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
				alert("Não pode inicializar shaders");
			}

			gl.useProgram(shaderProgram);

			shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
			gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

			shaderProgram.vertexTextureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
			gl.enableVertexAttribArray(shaderProgram.vertexTextureCoordAttribute);

			shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
			shaderProgram.vMatrixUniform = gl.getUniformLocation(shaderProgram, "uVMatrix");
			shaderProgram.mMatrixUniform = gl.getUniformLocation(shaderProgram, "uMMatrix");
		}

		function getShader(gl, id) {
			var shaderScript = $(id)[0];
			if (!shaderScript) {
				return null;
			}

			var str = "";
			var k = shaderScript.firstChild;
			while (k) {
				if (k.nodeType == 3)
					str += k.textContent;
				k = k.nextSibling;
			}

			var shader;
			if (shaderScript.type == "x-shader/x-fragment") {
				shader = gl.createShader(gl.FRAGMENT_SHADER);
			}
			else if (shaderScript.type == "x-shader/x-vertex") {
				shader = gl.createShader(gl.VERTEX_SHADER);
			}
			else {
				return null;
			}

			gl.shaderSource(shader, str);
			gl.compileShader(shader);

			if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
				alert(gl.getShaderInfoLog(shader));
				return null;
			}

			return shader;
		}
		function iniciarBuffers() {
			piramideVertexPositionBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexPositionBuffer);
			var vertices = [
				// Frente
				0.0, 1.0, 0.0,
				-1.0, -1.0, 1.0,
				1.0, -1.0, 1.0,
				// Direita
				0.0, 1.0, 0.0,
				1.0, -1.0, 1.0,
				1.0, -1.0, -1.0,
				// Trás
				0.0, 1.0, 0.0,
				1.0, -1.0, -1.0,
				-1.0, -1.0, -1.0,
				// Esquerda
				0.0, 1.0, 0.0,
				-1.0, -1.0, -1.0,
				-1.0, -1.0, 1.0,


				1.0, -1.0, 1.0,
				1.0, -1.0, -1.0,
				-1.0, -1.0, 1.0,
				-1.0, -1.0, -1.0,
			];
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
			piramideVertexPositionBuffer.itemSize = 3;
			piramideVertexPositionBuffer.numItems = 16;

			piramideVertexTextureCoordBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexTextureCoordBuffer);
			var coordTextura = [
				// Frente
				0.0, 0.0,
				1.0, 0.0,
				1.0, 1.0,

				// Trás
				0.0, 0.0,
				1.0, 0.0,
				1.0, 1.0,

				// Topo
				0.0, 0.0,
				1.0, 0.0,
				1.0, 1.0,

				// Base
				0.0, 0.0,
				1.0, 0.0,
				1.0, 1.0,

				0.0, 0.0,
				0.0, 1.0,
				1.0, 0.0,
				1.0, 1.0,

			];
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coordTextura), gl.STATIC_DRAW);
			piramideVertexTextureCoordBuffer.itemSize = 2;
			piramideVertexTextureCoordBuffer.numItems = 16;

			piramideVertexIndexBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, piramideVertexIndexBuffer);
			var indices = [
				0, 1, 2,     // Frente
				3, 4, 5,  // Trás
				6, 7, 8,   // Topo
				9, 10, 11,  // Base
				12, 13, 14, 13, 14, 15
			]
			gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
			piramideVertexIndexBuffer.itemSize = 1;
			piramideVertexIndexBuffer.numItems = 18;

			cuboVertexPositionBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, cuboVertexPositionBuffer);
			vertices = [
				// Face frente
				-1.0, -1.0, 1.0,
				1.0, -1.0, 1.0,
				1.0, 1.0, 1.0,
				-1.0, 1.0, 1.0,

				// face tras
				-1.0, -1.0, -1.0,
				-1.0, 1.0, -1.0,
				1.0, 1.0, -1.0,
				1.0, -1.0, -1.0,

				// face cima
				-1.0, 1.0, -1.0,
				-1.0, 1.0, 1.0,
				1.0, 1.0, 1.0,
				1.0, 1.0, -1.0,

				// face baixo
				-1.0, -1.0, -1.0,
				1.0, -1.0, -1.0,
				1.0, -1.0, 1.0,
				-1.0, -1.0, 1.0,

				// face direita
				1.0, -1.0, -1.0,
				1.0, 1.0, -1.0,
				1.0, 1.0, 1.0,
				1.0, -1.0, 1.0,

				// face esquerda
				-1.0, -1.0, -1.0,
				-1.0, -1.0, 1.0,
				-1.0, 1.0, 1.0,
				-1.0, 1.0, -1.0
			];
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
			cuboVertexPositionBuffer.itemSize = 3;
			cuboVertexPositionBuffer.numItems = 4;

			cuboVertexTextureCoordBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, cuboVertexTextureCoordBuffer);
			var coordTextura = [
				// Frente
				0.0, 0.0,
				1.0, 0.0,
				1.0, 1.0,
				0.0, 1.0,

				// Trás
				1.0, 0.0,
				1.0, 1.0,
				0.0, 1.0,
				0.0, 0.0,

				// Topo
				0.0, 1.0,
				0.0, 0.0,
				1.0, 0.0,
				1.0, 1.0,

				// Base
				1.0, 1.0,
				0.0, 1.0,
				0.0, 0.0,
				1.0, 0.0,

				// Direita
				1.0, 0.0,
				1.0, 1.0,
				0.0, 1.0,
				0.0, 0.0,

				// Esquerda
				0.0, 0.0,
				1.0, 0.0,
				1.0, 1.0,
				0.0, 1.0,
			];
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coordTextura), gl.STATIC_DRAW);
			cuboVertexTextureCoordBuffer.itemSize = 2;
			cuboVertexTextureCoordBuffer.numItems = 24;

			cuboVertexIndexBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cuboVertexIndexBuffer);
			var indices = [
				0, 1, 2, 0, 2, 3,    // Frente
				4, 5, 6, 4, 6, 7,    // Trás
				8, 9, 10, 8, 10, 11,  // Topo
				12, 13, 14, 12, 14, 15, // Base
				16, 17, 18, 16, 18, 19, // Direita
				20, 21, 22, 20, 22, 23  // Esquerda
			]
			gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
			cuboVertexIndexBuffer.itemSize = 1;
			cuboVertexIndexBuffer.numItems = 36;
		}
		function iniciarAmbiente() {
			gl.clearColor(0.0, 0.0, 0.0, 1.0);
			gl.enable(gl.DEPTH_TEST);
		}

		function desenharCena() {

			gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
			mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
			mat4.identity(mMatrix);
			mat4.identity(vMatrix);
			mat4.translate(mMatrix, [0, 0, -15]);
			mPushMatrix();
			mat4.rotate(mMatrix, degToRad(pxRot), [1, 0, 0]);
			mat4.rotate(mMatrix, degToRad(pyRot), [0, 1, 0]);
			gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, piramideVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexTextureCoordBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexTextureCoordAttribute, piramideVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D, trianguloTexturas[filtro]);
			gl.uniform1i(shaderProgram.samplerUniform, 0);

			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, piramideVertexIndexBuffer);
			setMatrixUniforms();
			gl.drawElements(gl.TRIANGLES, piramideVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
			if (!orbita) {
				mPopMatrix();
			}
			mat4.translate(mMatrix, [-5.0, 0.0, -5]);

			mat4.rotate(mMatrix, degToRad(xRot), [1, 0, 0]);
			mat4.rotate(mMatrix, degToRad(yRot), [0, 1, 0]);

			gl.bindBuffer(gl.ARRAY_BUFFER, cuboVertexPositionBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cuboVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, cuboVertexTextureCoordBuffer);
			gl.vertexAttribPointer(shaderProgram.vertexTextureCoordAttribute, cuboVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D, caixaTexturas[filtro]);
			gl.uniform1i(shaderProgram.samplerUniform, 0);

			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cuboVertexIndexBuffer);
			setMatrixUniforms();
			gl.drawElements(gl.TRIANGLES, cuboVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
		}

		function setMatrixUniforms() {
			gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
			gl.uniformMatrix4fv(shaderProgram.vMatrixUniform, false, vMatrix);
			gl.uniformMatrix4fv(shaderProgram.mMatrixUniform, false, mMatrix);
		}
		
		function animar() {
			var agora = new Date().getTime();
			if (ult != 0) {
				var result = agora - ult;
				rPiramide += ((90 * result) / 1000.0) % 360.0;
				xRot += ((xVelo * result) / 1000.0) % 360.0;
				yRot += ((yVelo * result) / 1000.0) % 360.0;
				pxRot += ((pxVelo * result) / 1000.0) % 360.0;
				pyRot += ((pyVelo * result) / 1000.0) % 360.0;
			}
			ult = agora;
		}

		function mPushMatrix() {
			var copy = mat4.create();
			mat4.set(mMatrix, copy);
			mMatrixPilha.push(copy);
		}

		function mPopMatrix() {
			if (mMatrixPilha.length == 0) {
				throw "inválido popMatrix!";
			}
			mMatrix = mMatrixPilha.pop();
		}

		function degToRad(graus) {
			return graus * Math.PI / 180;
		}
	</script>
	<style>
		canvas {
			border: none;
			width: 1000px;
			height: 1000px;
		}
	</style>

</head>

<body>
	<canvas id="licao01-canvas" width="500" height="500"></canvas>
</body>

<div style="float: right">
	<h4 style="color : crimson">Orbita ------ espace</h4>
	<h4 style="color : red">WASD ----- Movimenta a primamide</h4>
	<h4 style="color : brown">UHJK ------- Movumenta o cubo</h4>
	<h4 style="color : brown">f -------filtro</h4>
</div>


</html>
